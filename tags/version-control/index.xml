<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Version Control on Yongqi Wang's Blog</title><link>https://wyq977.github.io/blog/tags/version-control/</link><description>Recent content in Version Control on Yongqi Wang's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 09 May 2022 16:04:42 +0200</lastBuildDate><atom:link href="https://wyq977.github.io/blog/tags/version-control/index.xml" rel="self" type="application/rss+xml"/><item><title>R on Apple Silicon</title><link>https://wyq977.github.io/blog/p/r-on-apple-silicon/</link><pubDate>Mon, 09 May 2022 16:04:42 +0200</pubDate><guid>https://wyq977.github.io/blog/p/r-on-apple-silicon/</guid><description>&lt;h2 id="why"&gt;Why
&lt;/h2&gt;&lt;p&gt;Version control on R has always been a hassle for me personally since most of the bioinformatics tools or workflows relies too heavily on RMD or Notebook-like script due to its high flexibility. Despite its convenience in parameters tuning and data manipulation, it&amp;rsquo;s much more difficult than sharing the list of python packages in other workflows.&lt;/p&gt;
&lt;h2 id="existing-solution"&gt;Existing solution
&lt;/h2&gt;&lt;p&gt;Someone used Anaconda environment file but I personally find that a bit too clumsy. I never tried it but I assume if one put &lt;code&gt;R==4.1/4.2&lt;/code&gt; in &lt;code&gt;env.yml&lt;/code&gt;, conda will try to download and install a different version inside each env directory.&lt;/p&gt;
&lt;p&gt;However, this approach might be a lot more useful if a workflow involves a lot of cli tools such as &lt;code&gt;bwa&lt;/code&gt; of different version or self-compiled one. Keeping everything isolated definitely make things easier.&lt;/p&gt;
&lt;p&gt;stackoverflow discussion: &lt;a class="link" href="https://stackoverflow.com/questions/62187736/creating-an-r-environment-using-anaconda" target="_blank" rel="noopener"
&gt;https://stackoverflow.com/questions/62187736/creating-an-r-environment-using-anaconda&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="r-specific-approach"&gt;R-specific approach
&lt;/h2&gt;&lt;p&gt;As shown in &lt;a class="link" href="https://mp.weixin.qq.com/s/BsEm76Eq9_tbw3myobD_SA?" target="_blank" rel="noopener"
&gt;this post&lt;/a&gt;, RStudio became so successful to a point that it&amp;rsquo;s synonymous with R even though it can run in IDE or vim.&lt;/p&gt;
&lt;p&gt;Previously, what I experienced and interacted with R is mostly through RStudio but it might be better to explore more options to gain a better understanding of the packages installation, distribution and version control which is extremely important in real-world application where legacy packages are involved.&lt;/p&gt;
&lt;h3 id="where-is-r-and-its-packages"&gt;Where is R and its packages
&lt;/h3&gt;&lt;p&gt;On my personal computer, R can be installed from a version compiled by homebrew (&lt;code&gt;brew install r&lt;/code&gt;) or r-project one (&lt;code&gt;brew install --cask r&lt;/code&gt;). Later is preferred but I couldn&amp;rsquo;t find the references now.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;renv&lt;/code&gt; or &lt;code&gt;Packrat&lt;/code&gt; are manager that are trying to mimic the functionality of &lt;code&gt;python virtual enviroments&lt;/code&gt; without user-specific custom directories for each different versions of R packages, which requires too many user-defined path and custom env.&lt;/p&gt;
&lt;p&gt;ORC provides a great post on &lt;a class="link" href="http://wiki.orc.gmu.edu/mkdocs/How_to_manage_R_packages/" target="_blank" rel="noopener"
&gt;managing R Packages&lt;/a&gt; and &lt;a class="link" href="http://wiki.orc.gmu.edu/mkdocs/How_to_manage_R_packages/#renv-basic-operation" target="_blank" rel="noopener"
&gt;renv basics&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;del&gt;### Error with R dependency when compiling is required (Apple Silicon)&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;NOT NEEDED AS I SWITCHED TO gfortran FROM brew&lt;/em&gt;: It seems to work fine with the latest compiler from homebrew.&lt;/p&gt;
&lt;p&gt;This is specific to Apple silicon Macs, an experimental build of GNU Fortran compiler is required otherwise errors like these would pop up during installation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-fallback" data-lang="fallback"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;ld: warning: directory not found for option &amp;#39;-L/opt/R/arm64/gfortran/lib/gcc/aarch64-apple-darwin20.6.0/12.0.1&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This is due to &lt;a class="link" href="https://support.bioconductor.org/p/9138121/" target="_blank" rel="noopener"
&gt;no Fortran compiler&lt;/a&gt; and it can be solved with a experimental build.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;span class="lnt"&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# for R&amp;gt;=4.2.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;curl -O https://mac.r-project.org/tools/gfortran-12.0.1-20220312-is-darwin20-arm64.tar.xz
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# unpack&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;sudo tar fxz gfortran-12.0.1-20220312-is-darwin20-arm64.tar.xz -C /
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# /opt/R/arm64/gfortran/SDK has to point to your macOS SDK&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;sudo gfortran-update-sdk
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Details here: &lt;a class="link" href="https://mac.r-project.org/tools/" target="_blank" rel="noopener"
&gt;https://mac.r-project.org/tools/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="compilers-openmp-etc"&gt;Compilers, openMP, etc
&lt;/h2&gt;&lt;p&gt;Following the guide: &lt;a class="link" href="https://pat-s.me/transitioning-from-x86-to-arm64-on-macos-experiences-of-an-r-user/#virtual-machines--parallels" target="_blank" rel="noopener"
&gt;https://pat-s.me/transitioning-from-x86-to-arm64-on-macos-experiences-of-an-r-user/#virtual-machines--parallels&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gcc, llvm, openmp&lt;/code&gt; needs to be installed.&lt;/p&gt;
&lt;p&gt;To my surprise, the &lt;code&gt;~/.R/Makevars&lt;/code&gt; is not present after installation.&lt;/p&gt;
&lt;p&gt;Now it&amp;rsquo;s my config in &lt;code&gt;~/.R/Makevars&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# homebrew&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;FLIBS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;-L/opt/homebrew/opt/gfortran/lib
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;F77&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /opt/homebrew/bin/gfortran
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;FC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /opt/homebrew/bin/gfortran
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;CFLAGS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; -I/opt/homebrew/include
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;CPPFLAGS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; -I/opt/homebrew/include
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;CXXFLAGS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; -I/opt/homebrew/include
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# opemmp support&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;LDFLAGS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; -L/opt/homebrew/opt/libomp/lib -lomp
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;CPPFLAGS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; -Xclang -fopenmp
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id="speeding-up-by-replacing-the-blas-lib"&gt;Speeding up by replacing the BLAS lib
&lt;/h3&gt;&lt;p&gt;&lt;a class="link" href="https://www.mail-archive.com/r-sig-mac@r-project.org/msg06199.html" target="_blank" rel="noopener"
&gt;Here&lt;/a&gt;&amp;rsquo;s a post about matrix manipulation by new BLAS lib:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# create a symbolic link pointing libRblas.dylib to the optimized BLAS implementation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /Library/Frameworks/R.framework/Resources/lib/
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;ln -s -i -v libRblas.vecLib.dylib libRblas.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# If you ever want to revert this, do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /Library/Frameworks/R.framework/Resources/lib/
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;ln -s -i -v libRblas.0.dylib libRblas.dylib
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;In my test, using &lt;code&gt;benchmarkme&lt;/code&gt; in &lt;a class="link" href="plot_benchmark_BLAS.R" &gt;plot_benchmark_BLAS.R&lt;/a&gt;, it does improves significantly:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://wyq977.github.io/blog/p/r-on-apple-silicon/benchmark_plot.jpg"
width="2100"
height="2100"
srcset="https://wyq977.github.io/blog/p/r-on-apple-silicon/benchmark_plot_hu_14a8a84606a86068.jpg 480w, https://wyq977.github.io/blog/p/r-on-apple-silicon/benchmark_plot_hu_eb84116e8504011f.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
&gt;&lt;/p&gt;
&lt;p&gt;Original csv:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="benchmark_vel_BLAS.csv" &gt;&lt;code&gt;libRblas.vecLib.dylib&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="benchmark_default_BLAS.csv" &gt;&lt;code&gt;libRblas.0.dylib&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>